<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
* 상품 결제 Mybatis 매퍼
* @author 김민정
* @since 2024.08.28
* @version 1.0
*
* <pre>
* 수정일       수정자        수정내용
* ==========  =========    =========
* 2024.08.28  김민정        최초 생성
* 2024.08.28  김민정        상품 결제 정보 삽입을 위한 프로시저 호출
* 2024.08.28  김민정        새로운 장바구니 및 인증 QR 정보 삽입을 위한 프로시저 호출
* 2024.08.30  김민정        멤버의 이전 구매 기록에서 비슷한 가격대의 제품을 찾기
* 2024.08.30  김민정        전체 상품 중에서 비슷한 가격대의 제품을 찾기
* 2024.09.01  김민정        결제 후, 새로운 장바구니 ID 반환 기능 추가
* </pre>
-->
<mapper namespace="com.ite.sws.domain.payment.mapper.PaymentMapper">

	<!-- 상품 결제 정보 삽입을 위한 프로시저 호출 -->
	<insert id="insertPayment" parameterType="com.ite.sws.domain.payment.vo.PaymentVO" statementType="CALLABLE">
		{CALL PROC_INSERT_PAYMENT(
				#{cartId, mode=IN, jdbcType=NUMERIC},
				#{amount, mode=IN, jdbcType=NUMERIC},
				#{paymentCard, mode=IN, jdbcType=VARCHAR},
				#{paymentKey, mode=IN, jdbcType=VARCHAR},
				#{paymentTime, mode=IN, jdbcType=TIMESTAMP},
				#{paymentId, mode=OUT, jdbcType=NUMERIC}
			)}
	</insert>

	<!-- 새로운 장바구니 및 인증 QR 정보 삽입을 위한 프로시저 호출 -->
	<insert id="insertCartAndQRCode" parameterType="com.ite.sws.domain.payment.vo.CartQRCodeVO" statementType="CALLABLE">
		CALL PROC_INSERT_CART_AND_QRCODE(
			#{cartId, mode=IN, jdbcType=NUMERIC},
			#{paymentId, mode=IN, jdbcType=NUMERIC},
			#{qrCodeUri, mode=IN, jdbcType=VARCHAR},
			#{newCartId, mode=OUT, jdbcType=NUMERIC, javaType=java.lang.Long}
			)
	</insert>

	<!-- 결제 ID를 통한 출입증 상태 사용 처리 -->
	<update id="updateExitCredential">
		UPDATE EXIT_CREDENTIAL
		SET    STATUS = 'DONE',
			   UPDATED_AT = CURRENT_TIMESTAMP
		WHERE  PAYMENT_ID = #{paymentId}
		  AND  STATUS = 'ACTIVE'
	</update>

	<!-- 멤버의 이전 구매 기록에서 비슷한 가격대의 제품을 찾기 -->
	<select id="findPreviousPurchasesInPriceRange" resultType="com.ite.sws.domain.product.vo.ProductVO">
		SELECT    P.PRODUCT_ID,
				  P.NAME,
				  P.PRICE,
				  P.THUMBNAIL_IMAGE
		FROM      PRODUCT P
				  LEFT JOIN PAYMENT_ITEM PI ON P.PRODUCT_ID = PI.PRODUCT_ID
				  JOIN      PAYMENT PM 		ON PI.PAYMENT_ID = PM.PAYMENT_ID
				  JOIN      CART C 			ON PM.CART_ID = C.CART_ID
		WHERE     C.MEMBER_ID = #{memberId}
		  			AND P.PRICE BETWEEN #{targetAmount} AND #{targetAmount}+5000
		ORDER BY  P.PRICE ASC,
				  PI.CREATED_AT DESC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<!-- 전체 상품 중에서 비슷한 가격대의 제품을 찾기 -->
	<select id="findSingleProductInPriceRange" resultType="com.ite.sws.domain.product.vo.ProductVO">
		SELECT   PRODUCT_ID,
				 NAME,
				 PRICE,
				 THUMBNAIL_IMAGE
		FROM     PRODUCT
		WHERE    PRICE BETWEEN #{targetAmount} AND #{targetAmount}+10000
		ORDER BY PRICE ASC
		FETCH FIRST 1 ROWS ONLY
	</select>
</mapper>
