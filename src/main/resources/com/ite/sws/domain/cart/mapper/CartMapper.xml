<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <!-- 
 * 장바구니 Mybatis 매퍼
 * @author 김민정
 * @since 2024.08.26
 * @version 1.0
 *
 * <pre>
 * 수정일       수정자        수정내용
 * ==========  =========    =========
 * 2024.08.26  김민정        최초 생성
 * 2024.08.26  김민정        ACTIVE 상태인 가장 최신의 Cart ID를 가져오기
 * 2024.08.26  김민정        Cart ID에 해당하는 장바구니 아이템 가져오기
 * 2024.08.26  김민정        새로운 장바구니 생성
 * 2024.08.26  남진수        장바구니 회원가입
 * 2024.08.26  남진수        장바구니 로그인
 * 2024.08.26  김민정        장바구니 아이템 추가 및 수량 증가
 * 2024.08.26  김민정        바코드로 상품 조회
 * 2024.08.26  김민정        장바구니 아이템 수량 업데이트를 위한 프로시저 호출
 * 2024.08.26  김민정        장바구니 아이템 삭제
 * 2024.08.26  김민정        장바구니가 존재하는지 확인
 * 2024.08.30  김민정        장바구니에 해당하는 아이템들의 총 금액과 MEMBER_ID 조회
 * </pre>
 -->
<mapper namespace="com.ite.sws.domain.cart.mapper.CartMapper">
	<!-- ACTIVE 상태인 가장 최신의 Cart ID를 가져오기 -->
	<select id="selectActiveCartByMemberId" resultType="java.lang.Long">
		SELECT   CART_ID
		FROM     CART
		WHERE    MEMBER_ID = #{memberId}
		AND      STATUS = 'ACTIVE'
		ORDER BY CREATED_AT DESC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<!-- Cart ID에 해당하는 장바구니 아이템 가져오기 -->
	<select id="selectCartItemListByCartId" resultType="com.ite.sws.domain.cart.dto.GetCartRes$GetCartItemRes">
		SELECT CI.PRODUCT_ID     AS productId,
			   CI.QUANTITY       AS quantity,
			   P.NAME            AS productName,
			   P.PRICE           AS productPrice,
			   P.THUMBNAIL_IMAGE AS productThumbnail
		FROM   CART_ITEM CI
			   LEFT JOIN PRODUCT P ON CI.PRODUCT_ID = P.PRODUCT_ID
		WHERE  CI.CART_ID = #{cartId}
			   AND CI.IS_DELETED = 0
		ORDER  BY CI.UPDATED_AT DESC
	</select>

	<!-- 새로운 장바구니 생성 -->
	<insert id="insertCart">
		<selectKey keyProperty="cartId" resultType="long" order="BEFORE">
			SELECT SEQ_CART_ID.NEXTVAL
			FROM   DUAL
		</selectKey>
		INSERT INTO CART
					(CART_ID,
					 MEMBER_ID,
					 CART_URI)
		VALUES      (#{cartId},
					 #{memberId},
					 'scanandgo://deeplink?cartId=' || #{cartId})
	</insert>

	<!-- 장바구니 회원가입 -->
	<insert id="insertCartMember">
		INSERT INTO CART_MEMBER
					(CART_MEMBER_ID,
					 CART_ID,
					 NAME,
					 PASSWORD)
		VALUES      (SEQ_CART_MEMBER_ID.NEXTVAL,
		             #{cartId},
					 #{name},
					 #{password})
	</insert>

	<!-- 장바구니 로그인 -->
	<select id="selectCartMemberByLoginId">
		SELECT CART_MEMBER_ID,
			   CART_ID,
			   NAME,
			   PASSWORD,
			   CREATED_AT
		FROM   CART_MEMBER
		WHERE  NAME = #{loginId}
	</select>

	<!-- 장바구니 아이템 추가 및 수량 증가 처리:
	 	 (1) 새로운 아이템 생성
     	 (2) 기존에 장바구니에 해당 상품이 존재할 시, 수량 증가
     	  	- `IS_DELETED`가 0인 경우: 상품이 활성화된 상태이므로 수량을 증가
     	  	- `IS_DELETED`가 1인 경우: 상품이 삭제된 상태였으므로, 수량을 1로 초기화하고 다시 활성화 -->
	<update id="insertCartItem">
		MERGE INTO CART_ITEM CI
		USING (SELECT #{cartId}   AS CARTID,
              		  #{productId} AS PRODUCTID
			   FROM   DUAL) INPUT
		ON (CI.CART_ID = INPUT.CARTID
			AND CI.PRODUCT_ID = INPUT.PRODUCTID)
		WHEN MATCHED THEN
		-- 이미 존재하는 경우: IS_DELETED가 0일 경우에만 수량을 증가시킴
			UPDATE SET CI.QUANTITY = CASE
										WHEN CI.IS_DELETED = 0 THEN CI.QUANTITY + 1
										ELSE 1  -- IS_DELETED가 1인 경우, 수량을 1로 초기화
									END,
					   CI.IS_DELETED = 0, -- 삭제된 상태에서 다시 활성화
					   CI.UPDATED_AT = CURRENT_TIMESTAMP
		WHEN NOT MATCHED THEN
		  -- 존재하지 않는 경우 새로운 레코드 삽입
			INSERT (CART_ID,
					PRODUCT_ID)
			VALUES (INPUT.CARTID,
					INPUT.PRODUCTID)
	</update>

	<!-- 바코드로 상품 조회 -->
	<select id="selectProductByBarcode" resultType="java.lang.Long">
		SELECT PRODUCT_ID
		FROM   PRODUCT
		WHERE  BARCODE = #{barcode}
		  	   AND IS_DELETED = 0
	</select>

	<!-- 장바구니 아이템 수량 업데이트를 위한 프로시저 호출 -->
	<update id="updateCartItemQuantity">
		CALL PROC_UPDATE_CART_ITEM_QUANTITY(#{cartId}, #{productId}, #{quantity})
	</update>

	<!-- 장바구니 아이템 삭제 -->
	<update id="deleteCartItem">
		UPDATE CART_ITEM
		SET    IS_DELETED = 1
		WHERE  CART_ID = #{cartId}
        	   AND PRODUCT_ID = #{productId}
	</update>

	<!-- 장바구니가 존재하는지 확인 -->
	<select id="selectCountByCartId" resultType="int">
		SELECT COUNT(*)
		FROM   CART
		WHERE  CART_ID = #{cartId}
		 	   AND STATUS = 'ACTIVE'
	</select>

	<!-- 장바구니에 해당하는 아이템들의 총 금액과 MEMBER_ID 조회 -->
	<select id="calculateTotalCartValue" resultType="com.ite.sws.domain.cart.dto.CartTotalDTO">
		SELECT C.MEMBER_ID AS memberId,
		       SUM(P.PRICE * CI.QUANTITY) AS totalCartFee
		FROM   CART_ITEM CI
			   LEFT JOIN PRODUCT P ON CI.PRODUCT_ID = P.PRODUCT_ID
			   LEFT JOIN CART C ON C.CART_ID = CI.CART_ID
		WHERE  CI.CART_ID = #{cartId}
			   AND CI.IS_DELETED = 0
		  	   AND C.STATUS='ACTIVE'
		GROUP BY C.MEMBER_ID
	</select>

</mapper>
