<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "classpath:/org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd">

<!--
    *Admin Mybatis 매퍼
    *@구지웅
    *@since 2024.08.26
    *@version 1.0
    *
    *<pre>\
 *수정일 수정자 수정내용
     =================== =========
     * 2024.08.2 구지웅 최초 생성
     * 2024.08.27  	구지웅      세일즈 조회 쿼리 생성
     * 2024.08.27  	구지웅      회원 구매내역 select 쿼리 수정
     * 2024.09.04  	구지웅      sales 쿼리 수정
     * 2024.09.05   구지웅      selectPaymentHistory pagination 추가
    -->

<mapper namespace="com.ite.sws.domain.admin.mapper.AdminMapper">
  <insert id="insertProduct" parameterType="com.ite.sws.domain.product.vo.ProductVO">
    INSERT INTO PRODUCT (
    PRODUCT_ID,
    NAME,
    PRICE,
    THUMBNAIL_IMAGE,
    DESCRIPTION_IMAGE,
    BARCODE,
    DESCRIPTION
    ) VALUES (
    SEQ_PRODUCT_ID.NEXTVAL,
    #{name},
    #{price},
    #{thumbnailImage},
    #{descriptionImage},
    #{barcode},
    #{description}
    )
  </insert>

  <update id="updateProductIsDeleted" parameterType="long">
    UPDATE PRODUCT
    SET IS_DELETED =
        CASE
            WHEN IS_DELETED = 1 THEN 0
            ELSE 1
        END
    WHERE PRODUCT_ID = #{productId}
</update>

  <update id="updateProduct" parameterType="com.ite.sws.domain.product.vo.ProductVO">
    UPDATE PRODUCT
    SET
    NAME = #{name},
    PRICE = #{price},
    THUMBNAIL_IMAGE = #{thumbnailImage},
    DESCRIPTION_IMAGE = #{descriptionImage},
    BARCODE = #{barcode},
    DESCRIPTION = #{description},
    UPDATED_AT = CURRENT_TIMESTAMP
    WHERE
    PRODUCT_ID = #{productId}
  </update>

  <select id="selectPaymentHistory"
    parameterType="com.ite.sws.domain.admin.dto.PaymentHistoryCriteria"
    resultMap="GetPaymentHistoryResResultMap">
    SELECT
    p.payment_id AS payment_id,
    c.member_id AS member_id,
    m.name AS name,
    p.created_at AS created_at
    FROM
    payment p
    INNER JOIN cart c ON p.cart_id = c.cart_id
    INNER JOIN member m ON c.member_id = m.member_id
    WHERE
    EXTRACT(YEAR FROM p.created_at) = #{year}
    AND EXTRACT(MONTH FROM p.created_at) = #{month}
    AND EXTRACT(DAY FROM p.created_at) = #{day}
    ORDER BY p.created_at DESC
    OFFSET #{page} * #{size} ROWS FETCH NEXT #{size} ROWS ONLY
  </select>


<select id="selectMemberPaymentHistory" parameterType="long" resultMap="memberPaymentHistoryResultMap">
    SELECT
        P.PAYMENT_ID AS paymentId,
        paymentTotals.totalAmountSum, -- Total amount for the payment
        P.CREATED_AT AS paymentCreatedAt,
        PI.PRODUCT_ID AS productId,
        PI.NAME AS productName,
        PI.THUMBNAIL_IMAGE AS thumbnailImage,
        PI.QUANTITY AS quantity,
        PI.PRICE AS price
    FROM
        PAYMENT P
        JOIN PAYMENT_ITEM PI ON P.PAYMENT_ID = PI.PAYMENT_ID
        JOIN (
            SELECT
                PAYMENT_ID,
                SUM(PRICE * QUANTITY) AS totalAmountSum
            FROM
                PAYMENT_ITEM
            GROUP BY
                PAYMENT_ID
        ) paymentTotals ON P.PAYMENT_ID = paymentTotals.PAYMENT_ID
    WHERE
        P.PAYMENT_ID = #{paymentId}
    ORDER BY
        P.CREATED_AT DESC
</select>


<select id="selectSalesByCriteria" parameterType="com.ite.sws.domain.admin.dto.SalesCriteria"
    resultMap="GetSalesResMap">

    SELECT
        EXTRACT(DAY FROM P.CREATED_AT) AS day,
        SUM(P.AMOUNT) AS totalAmount,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.GENDER = 'M' THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS maleRatio,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.GENDER = 'F' THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS femaleRatio,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.AGE BETWEEN 10 AND 19 THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS ageRange1Ratio,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.AGE BETWEEN 20 AND 29 THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS ageRange2Ratio,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.AGE BETWEEN 30 AND 39 THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS ageRange3Ratio,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.AGE BETWEEN 40 AND 49 THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS ageRange4Ratio,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.AGE BETWEEN 50 AND 59 THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS ageRange5Ratio,

        (SELECT ROUND(100 * SUM(CASE WHEN M2.AGE >= 60 THEN 1 ELSE 0 END) / COUNT(*), 2)
         FROM PAYMENT P2
         JOIN CART C2 ON P2.CART_ID = C2.CART_ID
         JOIN MEMBER M2 ON C2.MEMBER_ID = M2.MEMBER_ID
         WHERE EXTRACT(YEAR FROM P2.CREATED_AT) = #{year} AND EXTRACT(MONTH FROM P2.CREATED_AT) = #{month}
        ) AS ageRangeSixtyToLastRatio
    FROM
        PAYMENT P
    WHERE
        EXTRACT(YEAR FROM P.CREATED_AT) = #{year}
        AND EXTRACT(MONTH FROM P.CREATED_AT) = #{month}
    GROUP BY
        EXTRACT(DAY FROM P.CREATED_AT)
    ORDER BY
        day ASC
</select>

 <resultMap id="GetSalesResMap" type="com.ite.sws.domain.admin.dto.GetSalesRes">
    <result property="maleRatio" column="maleRatio" />
    <result property="femaleRatio" column="femaleRatio" />
    <result property="ageRange1Ratio" column="ageRange1Ratio" />
    <result property="ageRange2Ratio" column="ageRange2Ratio" />
    <result property="ageRange3Ratio" column="ageRange3Ratio" />
    <result property="ageRange4Ratio" column="ageRange4Ratio" />
    <result property="ageRange5Ratio" column="ageRange5Ratio" />
    <result property="ageRangeSixtyToLastRatio" column="ageRangeSixtyToLastRatio" />
    <collection property="dailySaleDtoList" ofType="com.ite.sws.domain.admin.dto.DailySaleDto">
        <id property="day" column="day" />
        <result property="totalAmount" column="totalAmount" />
    </collection>
</resultMap>


<resultMap id="memberPaymentHistoryResultMap" type="com.ite.sws.domain.admin.dto.GetMemberPaymentHistoryRes">
    <id property="paymentId" column="paymentId"/>
    <result property="totalAmountSum" column="totalAmountSum"/>
    <result property="paymentCreatedAt" column="paymentCreatedAt"/>
    <collection property="purchasedProducts" ofType="com.ite.sws.domain.admin.dto.PurchasedProduct">
        <result property="productId" column="productId"/>
        <result property="productName" column="productName"/>
        <result property="thumbnailImage" column="thumbnailImage"/>
        <result property="quantity" column="quantity"/>
        <result property="price" column="price"/>
    </collection>
</resultMap>


  <resultMap id="GetPaymentHistoryResResultMap"
    type="com.ite.sws.domain.admin.dto.GetPaymentHistoryRes">
    <id property="paymentId" column="payment_id"/>
    <result property="userId" column="member_id"/>
    <result property="userName" column="name"/>
    <result property="createdAt" column="created_at"/>
  </resultMap>

</mapper>